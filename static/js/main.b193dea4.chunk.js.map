{"version":3,"sources":["assets/imgs/catstagram.png","pages/MainPage.js","App.js","reportWebVitals.js","index.js"],"names":["axios","require","MainPage","useState","country_flag_url","images","breeds","selected_breed","current_image","data","setData","headerBreeds","setHeaderBreeds","selectedCat","setSelectedCat","isVisible","setIsVisible","useEffect","length","getBreeds","getImages","sortImagesHeader","a","defaults","headers","common","get","response","allBreeds","prevState","console","log","idImg","query_params","breed_ids","limit","params","selectedB","imagesData","val","lengthNumber","arrBreedsHeader","i","numberRandom","randomNumber","elementObjet","name","url","image","push","nuberOfitemsToSet","minimo","maximo","Math","floor","random","className","start","src","CatstagramLogo","alt","width","end","optionLabel","optionValue","value","options","onChange","e","placeholder","map","breed","index","onClick","desccription","description","imageClick","header","visible","style","modal","onHide","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAAe,MAA0B,uC,OCMnCA,EAAQC,EAAQ,IA6JPC,MA1Jf,WAAqB,IAAD,IACMC,mBACtB,CACEC,iBAAkB,GAClBC,OAAQ,GACRC,OAAQ,GACRC,eAAgB,GAChBC,cAAe,KAPD,mBACXC,EADW,KACLC,EADK,OAWsBP,mBAAS,IAX/B,mBAWXQ,EAXW,KAWGC,EAXH,OAYoBT,mBAAS,IAZ7B,mBAYXU,EAZW,KAYEC,EAZF,OAagBX,oBAAS,GAbzB,mBAaXY,EAbW,KAaAC,EAbA,KAelBC,qBAAU,WACPR,EAAKH,OAAOY,QAAU,GAAMC,IACL,IAAvBV,EAAKJ,OAAOa,QAAiBE,EAAU,IACxCX,EAAKH,OAAOY,OAAS,GAAKG,MACzB,CAACZ,EAAKH,SAET,IAAIa,EAAS,uCAAG,8BAAAG,EAAA,sEAEZtB,EAAMuB,SAASC,QAAQC,OAAO,wCAA0C,eAF5D,SAISzB,EAAM0B,IAAI,wCAJnB,OAIRC,EAJQ,OAKRC,EAAYD,EAASlB,KACzBC,GAAQ,SAAAmB,GAAS,kCACZA,GADY,IACDvB,OAAQsB,OAExBP,IATY,kDAYZS,QAAQC,IAAR,MAZY,0DAAH,qDAoBPX,EAAS,uCAAG,WAAOY,GAAP,qBAAAV,EAAA,sEAIVW,EAAe,CACjBC,UAHaF,EAIbG,MAAO,IANK,SASOnC,EAAM0B,IAAI,6CAA8C,CAAEU,OAAQH,IATzE,OASVN,EATU,QAWVU,EAAY5B,EAAKF,kBACHyB,GAAuB,KAAdK,IACrBC,EAAaX,EAASlB,KAC1BC,GAAQ,SAAAmB,GAAS,kCACZA,GADY,IACDxB,OAAQiC,EAAY/B,eAAgByB,QAfxC,kDAoBdF,QAAQC,IAAR,MApBc,0DAAH,sDAwBTV,EAAgB,uCAAG,WAAOkB,GAAP,uBAAAjB,EAAA,sDAMvB,IAJwB,EACpBkB,EAAe/B,EAAKH,OAAOY,OAC3BuB,EAAkB,GAEbC,EAAI,EAAGA,GAJQ,EAIgBA,IAClCC,EAAeC,EAAa,EAAGJ,GAC/B/B,EAAKH,OAAOY,OAAS,GAAKyB,GAAgBlC,EAAKH,OAAOY,SAElD2B,EAAepC,EAAKH,OAAOqC,IAAiB,CAChDG,KAAMrC,EAAKH,OAAOqC,GAAcG,KAChCC,IAAKtC,EAAKH,OAAOqC,GAAcK,MAAMD,KAKnCpC,EAAaO,OAfG,GAgBlBuB,EAAgBQ,KAAKJ,GAKQK,IAA3BT,EAAgBvB,QAClBN,EAAgB6B,IAxBC,2CAAH,sDAiChBG,EAAe,SAACO,EAAQC,GAC5B,OAAOC,KAAKC,MAAMD,KAAKE,UAAaH,EAAS,EAAKD,GAAUA,IAmB9D,OACE,sBAAKK,UAAU,QAAf,UACE,cAAC,IAAD,CACEC,MAAO,cAAC,IAAD,CAAOC,IAAKC,EAAgBC,IAAI,aAAaC,MAAM,QAC1DC,IACE,cAAC,IAAD,CAAUC,YAAY,OAAOC,YAAY,KAAKC,MAAOxD,EAAKF,eAAgB2D,QAASzD,EAAKH,OAAQ6D,SAAU,SAACC,GAAQ1D,GAAQ,SAACmB,GAAD,mBAAC,eAAoBA,GAArB,IAAgCtB,eAAgB6D,EAAEH,WAAW7C,EAAUgD,EAAEH,QAAWI,YAAY,qBAG/N,8BACE,qBAAKb,UAAU,+FAAf,gBACG7C,QADH,IACGA,OADH,EACGA,EAAc2D,KAAI,SAACC,EAAOC,GAAR,OACjB,gCACA,qBAAKhB,UAAU,yCAAf,SACE,qBAAKE,IAAKa,EAAMxB,IAAKS,UAAU,sCAAsCI,IAAI,iBAE3E,mBAAGJ,UAAU,cAAb,SAA4Be,EAAMzB,SAJxB0B,UAUhB,qBAAKhB,UAAU,0EAAf,mBACG/C,EAAKJ,cADR,aACG,EAAaiE,KAAI,SAACtB,EAAOwB,GAAR,OAChB,qBAAiBhB,UAAU,qCAAqCiB,QAAS,kBAvChE,SAACzB,GAChB,IAAIF,EAAgC,IAAxBE,EAAM1C,OAAOY,OAAiB8B,EAAM1C,OAAO,GAAGwC,KAAQ,GAC9DC,EAAOC,EAAMD,IAAOC,EAAMD,IAAM,GAChC2B,EAAwC,IAAxB1B,EAAM1C,OAAOY,OAAgB8B,EAAM1C,OAAO,GAAGqE,YAAc,kEAC/E7D,EAAe,CACbgC,KAAMA,EACNC,IAAKA,EACL2B,aAAcA,IAEZ7D,GACFG,GAAa,GA6BsE4D,CAAW5B,IAA1F,SAAmG,qBAAKQ,UAAU,sCAAsCE,IAAKV,EAAMD,IAAKa,IAAI,gBAAlKY,QAId,eAAC,IAAD,CAAQK,OAAQhE,EAAYiC,KAAQgC,QAAS/D,EAAWgE,MAAO,CAAClB,MAAO,QAASmB,OAAK,EAACC,OA5G1E,WACZjE,GAAa,IA2Gb,UACI,qBAAKwC,UAAU,sCAAsCE,IAAK7C,EAAYkC,IAAKa,IAAI,eAC/E,mBAAGJ,UAAU,oBAAb,SAAkC3C,EAAY6D,sBClJzCQ,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b193dea4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/catstagram.9b70ac5b.png\";","import React, { useState, useEffect } from 'react';\r\nimport { Menubar } from 'primereact/menubar';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { Image } from 'primereact/image';\r\nimport CatstagramLogo from '../assets/imgs/catstagram.png';\r\nconst axios = require('axios');\r\n\r\n\r\nfunction MainPage() {\r\n  const [data, setData] = useState(\r\n    {\r\n      country_flag_url: \"\",\r\n      images: [],\r\n      breeds: [],\r\n      selected_breed: \"\",\r\n      current_image: {},\r\n    }\r\n  );\r\n\r\n  const [headerBreeds, setHeaderBreeds] = useState([]);\r\n  const [selectedCat, setSelectedCat] = useState({});\r\n  const [isVisible, setIsVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    (data.breeds.length <= 0) && getBreeds();\r\n    (data.images.length === 0) && getImages('');\r\n    data.breeds.length > 0 && sortImagesHeader();\r\n  }, [data.breeds]);\r\n\r\n  let getBreeds = async () => {\r\n    try {\r\n      axios.defaults.headers.common['795b1114-38d1-45da-8f3c-019934eb60c7'] = \"DEMO-API-KEY\" // Replace this with your API Key, as it's set to defaults it will be used from now onwards\r\n\r\n      let response = await axios.get('https://api.thecatapi.com/v1/breeds/')\r\n      let allBreeds = response.data;\r\n      setData(prevState => ({\r\n        ...prevState, breeds: allBreeds\r\n      }))\r\n      sortImagesHeader()\r\n\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  }\r\n\r\n  let hideModal = () => {\r\n      setIsVisible(false);\r\n  }\r\n\r\n  const getImages = async (idImg) => {\r\n    try {\r\n      let strBreed = idImg;\r\n\r\n      let query_params = {\r\n        breed_ids: strBreed,\r\n        limit: 15\r\n      }\r\n\r\n      let response = await axios.get('https://api.thecatapi.com/v1/images/search', { params: query_params })\r\n\r\n      let selectedB = data.selected_breed;\r\n      if (selectedB !== idImg || selectedB === '') {\r\n        let imagesData = response.data;\r\n        setData(prevState => ({\r\n          ...prevState, images: imagesData, selected_breed: idImg\r\n        }))\r\n      }\r\n\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  }\r\n\r\n  const sortImagesHeader = async (val) => {\r\n\r\n    let nuberOfitemsToSet = 5;\r\n    let lengthNumber = data.breeds.length;\r\n    let arrBreedsHeader = [];\r\n\r\n    for (let i = 0; i <= nuberOfitemsToSet; i++) {\r\n      let numberRandom = randomNumber(0, lengthNumber);\r\n      if (data.breeds.length > 0 && numberRandom <= data.breeds.length) {\r\n      \r\n        const elementObjet = data.breeds[numberRandom] && {\r\n          name: data.breeds[numberRandom].name,\r\n          url: data.breeds[numberRandom].image.url,\r\n\r\n        };\r\n      \r\n\r\n        if (headerBreeds.length < nuberOfitemsToSet) {\r\n          arrBreedsHeader.push(elementObjet);\r\n\r\n        }\r\n      \r\n\r\n        if (arrBreedsHeader.length === nuberOfitemsToSet + 1) {\r\n          setHeaderBreeds(arrBreedsHeader);\r\n        }\r\n      }\r\n\r\n\r\n    }\r\n  }\r\n\r\n\r\n  const randomNumber = (minimo, maximo) => {\r\n    return Math.floor(Math.random() * ((maximo + 1) - minimo) + minimo);\r\n  }\r\n\r\n  let imageClick = (image) => {\r\n    let name = (image.breeds.length !== 0) ? (image.breeds[0].name) : '';\r\n    let url = (image.url) ? image.url : '';\r\n    let desccription = (image.breeds.length !== 0) ? image.breeds[0].description : 'No information available at the moment, we are working on it :)';\r\n    setSelectedCat({\r\n      name: name,\r\n      url: url,\r\n      desccription: desccription\r\n    })\r\n    if (selectedCat) {\r\n      setIsVisible(true)\r\n    }\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"mb-10\">\r\n      <Menubar\r\n        start={<Image src={CatstagramLogo} alt=\"catstagram\" width='100' />}\r\n        end={\r\n          <Dropdown optionLabel=\"name\" optionValue=\"id\" value={data.selected_breed} options={data.breeds} onChange={(e) => { setData((prevState) => ({ ...prevState, selected_breed: e.value })); getImages(e.value); }} placeholder=\"Select a Breed\" />\r\n        }\r\n      />\r\n      <div>\r\n        <div className=\"container grid justify-items-center md:grid-cols-6 sm:grid-cols-3 gap-10 pt-20 w-4/5 mx-auto\">\r\n          {headerBreeds?.map((breed, index) => (\r\n            <div key={index}>\r\n            <div className=\"w-20 h-20 rounded-full overflow-hidden\">\r\n              <img src={breed.url} className=\" object-cover min-w-full min-h-full\" alt=\"catstagram\" />\r\n            </div>\r\n            <p className=\"text-center\">{breed.name}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"container grid md:grid-cols-3 sm:grid-cols-1 gap-10 px-10 pt-20 mx-auto\">\r\n        {data.images?.map((image, index) => (\r\n          <div key={index} className=\"w-100 h-60 rounded overflow-hidden\" onClick={() => imageClick(image)} ><img className=\" object-cover min-w-full min-h-full\" src={image.url} alt=\"catstagram\" /></div>\r\n        ))}\r\n      </div>\r\n\r\n      <Dialog header={selectedCat.name}   visible={isVisible} style={{width: '50vw'}} modal onHide={hideModal}>\r\n          <img className=\" object-cover min-w-full min-h-full\" src={selectedCat.url} alt=\"catstagram\" />\r\n          <p className=\"text-center mt-10\">{selectedCat.desccription}</p>\r\n      </Dialog>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\nexport default MainPage;\r\n","import  MainPage  from './pages/MainPage'\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <MainPage />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './main.css';\r\nimport 'primeflex/primeflex.css';\r\nimport 'primereact/resources/themes/lara-light-indigo/theme.css'   //theme\r\nimport 'primereact/resources/primereact.min.css'                  //core css\r\nimport 'primeicons/primeicons.css'                                //icons\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}